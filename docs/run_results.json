{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-05-16T09:55:22.785998Z", "invocation_id": "f4d2a4d5-ed16-4ab8-9873-3c6a010e126b", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.367845Z", "completed_at": "2025-05-16T09:55:21.396712Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.398740Z", "completed_at": "2025-05-16T09:55:21.398794Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05021929740905762, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_beverage_glass_lookup", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_Beverage_glass_lookup\n-- Description: Beverage Glass Type Dim Base Table\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSelect str_glass as Glass_Type,\nmd5(cast(coalesce(cast(str_glass as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as Glass_Type_SK\nfrom \"camondagster\".\"beverage_data\".\"glasses\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_beverage_glass_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.354168Z", "completed_at": "2025-05-16T09:55:21.399978Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.402627Z", "completed_at": "2025-05-16T09:55:21.402641Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05552339553833008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_beverage_consumption", "compiled": true, "compiled_code": "SELECT id_drink, str_drink, str_category, str_alcoholic, str_glass, str_instructions, \nstr_drink_thumb, (date_modified AT TIME ZONE 'Australia/Melbourne')::date AS date_melbourne,\nstr_ingredient1, str_ingredient2, \nstr_ingredient3, str_ingredient4, str_ingredient5, str_ingredient6, \nstr_ingredient7, str_ingredient8\n\t-- FROM cocktail_data.consumption\n    from \"camondagster\".\"beverage_data\".\"consumption\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_beverage_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.410739Z", "completed_at": "2025-05-16T09:55:21.434386Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.436014Z", "completed_at": "2025-05-16T09:55:21.436034Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0321044921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_beverage_ingredients_lookup", "compiled": true, "compiled_code": "Select str_ingredient1 as Ingredient,\nit.id_drink as beverage_id,\nit.str_drink as Beverage_Name\nfrom \"camondagster\".\"beverage_data\".\"ingredients\" as i \nleft join \"camondagster\".\"beverage_data\".\"ingredients_table\"  as it\n\ton i.str_ingredient1 = it.source_ingredient\nwhere it.id_drink is not null", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_beverage_ingredients_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.421912Z", "completed_at": "2025-05-16T09:55:21.437240Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.440006Z", "completed_at": "2025-05-16T09:55:21.440052Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03129386901855469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_beverages", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_Beverages\n-- Description: Base Table for multiple Dims - Bev Type, Alcoholic Type and Beverage Name\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nselect bt.str_drink as beverage_name, \n    bt.id_drink as beverage_id, \n\tbt.source_beverage_type as beverage_type,\n\tmd5(cast(coalesce(cast(source_beverage_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_alcohol_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as beverage_category_sk,\n\tact.source_alcohol_type as alcoholic_type\n\tfrom \"camondagster\".\"beverage_data\".\"beverages_table\" as bt\n    left join \"camondagster\".\"beverage_data\".\"alcoholic_table\" as act \n\ton bt.id_drink = act.id_drink", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_beverages\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.449796Z", "completed_at": "2025-05-16T09:55:21.469434Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.471049Z", "completed_at": "2025-05-16T09:55:21.471066Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02820587158203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_geo", "compiled": true, "compiled_code": "SELECT city_id, city, latitude, longitude, country_code, country, region, continent\nFrom \"camondagster\".\"geo_data\".\"geo_cities\" \nwhere country in ('New Zealand', 'United Kingdom', 'Australia', 'Canada')", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_geo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.459222Z", "completed_at": "2025-05-16T09:55:21.472378Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.475021Z", "completed_at": "2025-05-16T09:55:21.475036Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027082443237304688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_gsheets_finance", "compiled": true, "compiled_code": "SELECT \n    Id, \n    stock, \n    CAST(price AS DECIMAL) AS price,  -- DuckDB doesn't have a money type\n    date_time AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS date_time,\n    ROUND((MAX(price) OVER(PARTITION BY stock) - MIN(price) OVER(PARTITION BY stock)), 2) AS price_spread,\n    ROUND((LAST(price) OVER(PARTITION BY stock ORDER BY date_time) - FIRST(price) OVER(PARTITION BY stock)), 2) AS relative_price_movement,\n    ROUND((LAST(price) OVER(PARTITION BY stock) - FIRST(price) OVER(PARTITION BY stock)), 2) AS abs_price_movement,\n    COUNT(id) OVER(PARTITION BY stock) AS Num_Stock_Entries\nFROM \"camondagster\".\"google_sheets_data\".\"gsheets_finance\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_gsheets_finance\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.482760Z", "completed_at": "2025-05-16T09:55:21.507620Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.509436Z", "completed_at": "2025-05-16T09:55:21.509460Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03301572799682617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_meal_category_country", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: base_meal_category_country\n-- Description: Base Table for multiple Dims - meal category, meal country\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT ct.str_meal as meal_name, ct.id_meal as meal_id, \n\tct.source_country as country_name,\n\tmd5(cast(coalesce(cast(source_country as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_category as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as meal_country_category_sk,\n\tcat.source_category as category_name\nFROM \"camondagster\".\"meals_data\".\"country_table\" as ct\n\tleft join \"camondagster\".\"meals_data\".\"category_table\" as cat \n\ton ct.id_meal = cat.id_meal", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_meal_category_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.494366Z", "completed_at": "2025-05-16T09:55:21.510547Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.513624Z", "completed_at": "2025-05-16T09:55:21.513636Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0324397087097168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_meal_consumption", "compiled": true, "compiled_code": "select id_meal as meal_id, str_meal as meal_name, str_category as category_name, str_area as country_name, \nstr_instructions as instructions, str_meal_thumb as meal_image_url, str_youtube as meal_youtube_url, \nNULLIF(str_ingredient1, '') as str_ingredient1, \nNULLIF(str_ingredient2, '') as str_ingredient2,\nNULLIF(str_ingredient3, '') as str_ingredient3,\nNULLIF(str_ingredient4, '') as str_ingredient4,\nNULLIF(str_ingredient5, '') as str_ingredient5,\nNULLIF(str_ingredient6, '') as str_ingredient6,\nNULLIF(str_ingredient7, '') as str_ingredient7, \nNULLIF(str_ingredient8, '') as str_ingredient8,\nNULLIF(str_ingredient9, '') as str_ingredient9,\nNULLIF(str_ingredient10, '') as str_ingredient10,\nNULLIF(str_ingredient11, '') as str_ingredient11,\nNULLIF(str_ingredient12, '') as str_ingredient12,\nNULLIF(str_ingredient13, '') as str_ingredient13,\nNULLIF(str_ingredient14, '') as str_ingredient14,\nNULLIF(str_ingredient15, '') as str_ingredient15,\nNULLIF(str_ingredient16, '') as str_ingredient16,\nNULLIF(str_ingredient17, '') as str_ingredient17,\nNULLIF(str_ingredient18, '') as str_ingredient18,\nNULLIF(str_ingredient19, '') as str_ingredient19,\nNULLIF(str_ingredient20, '') as str_ingredient20,\nstr_source as meal_url\n    from \"camondagster\".\"meals_data\".\"consumption\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_meal_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.521681Z", "completed_at": "2025-05-16T09:55:21.545049Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.547196Z", "completed_at": "2025-05-16T09:55:21.547207Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03191232681274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_meal_ingredient_table", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_meal_ingredient_table\n-- Description: Base Table for list of meals for each ingredient\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT str_meal as meal_name, id_meal as meal_id, \nsource_ingredient as ingredient_name\nFROM \"camondagster\".\"meals_data\".\"ingredient_table\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_meal_ingredient_table\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.531113Z", "completed_at": "2025-05-16T09:55:21.545920Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.548909Z", "completed_at": "2025-05-16T09:55:21.548917Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.028989791870117188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_meal_ingredients", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_meal_ingredients\n-- Description: Base Table for meal ingredients\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT id_ingredient as ingredient_id, str_ingredient as ingredient_name\nFROM \"camondagster\".\"meals_data\".\"ingredients\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_meal_ingredients\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.560896Z", "completed_at": "2025-05-16T09:55:21.581732Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.584031Z", "completed_at": "2025-05-16T09:55:21.584045Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.030018329620361328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_openlibrary", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_Beverage_openlibrary\n-- Description: Unioning Tables with Books seperated by Search and Filter term\n-- from the OpenLibrary API, the point of this is to test using both DLT State\n-- & DuckDb connection to check for New API data (via DLT State) and deleted or\n-- truncation data loss with DuckDB sql comparison with DLT State.\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-15 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"sql_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"python_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"data_warehousing_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"data_engineering_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"apache_airflow_books\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_openlibrary\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.568667Z", "completed_at": "2025-05-16T09:55:21.582803Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.585969Z", "completed_at": "2025-05-16T09:55:21.585980Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030313968658447266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_rm_character_episode", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_rm_character_episode\n-- Description: Base join table\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT\n  _dlt_root_id AS character_dlt_id,\n  CAST(regexp_replace(value, '.*/(\\d+)$', '\\1') AS INTEGER) AS episode_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"character__episode\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_rm_character_episode\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.598012Z", "completed_at": "2025-05-16T09:55:21.620511Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.624086Z", "completed_at": "2025-05-16T09:55:21.624103Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03302431106567383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_rm_characters", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_rm_characters\n-- Description: Base Table for ricky and morty characters from API\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nSELECT id, name, status, species, gender, origin__name, location__name, location__url, \nimage, url, created AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS created\n, \"_dlt_id\" as character_dlt_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"character\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_rm_characters\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.604179Z", "completed_at": "2025-05-16T09:55:21.622435Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.627153Z", "completed_at": "2025-05-16T09:55:21.627170Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0340266227722168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_rm_episode_character", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_rm_episode_character\n-- Description: Base join table\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT\n  _dlt_root_id AS episode_dlt_id,\n  CAST(regexp_replace(value, '.*/(\\d+)$', '\\1') AS INTEGER) AS character_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"episode__characters\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_rm_episode_character\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.649149Z", "completed_at": "2025-05-16T09:55:21.662098Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.664113Z", "completed_at": "2025-05-16T09:55:21.664125Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.028228044509887695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_rm_location_residents", "compiled": true, "compiled_code": "SELECT\n  _dlt_root_id AS location_dlt_id,\n  CAST(regexp_replace(value, '.*/(\\d+)$', '\\1') AS INTEGER) AS character_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"location__residents\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_rm_location_residents\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.642489Z", "completed_at": "2025-05-16T09:55:21.663071Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.665722Z", "completed_at": "2025-05-16T09:55:21.665731Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.031389474868774414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_rm_episodes", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: base_rm_episode\n-- Description: Base Table for ricky and morty episodes from API\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nSELECT id, name\n,STRPTIME(air_date, '%B %d, %Y') AS air_date\n, episode, url \n,created AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS created\n,\"_dlt_id\" as episode_dlt_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"episode\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_rm_episodes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.674792Z", "completed_at": "2025-05-16T09:55:21.695291Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.696801Z", "completed_at": "2025-05-16T09:55:21.696831Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02754688262939453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_rm_locations", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: base_rm_locations\n-- Description: Base Table for ricky and morty locations from API\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT id, name, type, dimension, url\n,created AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS created\n,\"_dlt_id\" as location_dlt_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"location\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_rm_locations\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.680848Z", "completed_at": "2025-05-16T09:55:21.697966Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.700869Z", "completed_at": "2025-05-16T09:55:21.700878Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.030073165893554688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_beverage_ingredient_jointable", "compiled": true, "compiled_code": "SELECT distinct id_drink as Beverage_ID\n    from \"camondagster\".\"beverage_data\".\"ingredients_table\" as it\n    where id_drink is not null", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_beverage_ingredient_jointable\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.716313Z", "completed_at": "2025-05-16T09:55:21.721677Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.723780Z", "completed_at": "2025-05-16T09:55:21.723810Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016847848892211914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.CamOnDagster.glass_type_snapshot", "compiled": true, "compiled_code": "\n\n\n\nSELECT \n    Glass_Type,\n    Glass_Type_SK\nFROM \"CamOnDagster\".\"public_base\".\"base_beverage_glass_lookup\" \n", "relation_name": "\"CamOnDagster\".\"public_snapshots\".\"glass_type_snapshot\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.708516Z", "completed_at": "2025-05-16T09:55:21.729622Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.731926Z", "completed_at": "2025-05-16T09:55:21.731937Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.029488563537597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_date", "compiled": true, "compiled_code": "WITH RECURSIVE date_series AS (\n    SELECT DATE '2000-01-01' AS date\n    UNION ALL\n    SELECT date + INTERVAL '1 day'\n    FROM date_series\n    WHERE date + INTERVAL '1 day' < DATE '2030-01-01'\n)\nSELECT\n    date AS date_col,\n    EXTRACT(YEAR FROM date) AS year,\n    EXTRACT(MONTH FROM date) AS month,\n    EXTRACT(DAY FROM date) AS day,\n    strftime('%B', date) AS month_name,  -- Replacing TO_CHAR with strftime\n    strftime('%A', date) AS weekday_name,  -- Replacing TO_CHAR with strftime\n    EXTRACT(DOW FROM date) AS day_of_week,\n    CASE WHEN EXTRACT(DOW FROM date) IN (0, 6) THEN TRUE ELSE FALSE END AS is_weekend,\n    EXTRACT(DOY FROM date) AS day_of_year,\n    EXTRACT(WEEK FROM date) AS week_of_year,\n    EXTRACT(QUARTER FROM date) AS quarter\nFROM date_series", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_date\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.733896Z", "completed_at": "2025-05-16T09:55:21.771620Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.773450Z", "completed_at": "2025-05-16T09:55:21.773465Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04527902603149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_beverage_glass_lookup_glass_type.af0bc394b6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect glass_type\nfrom \"CamOnDagster\".\"public_base\".\"base_beverage_glass_lookup\"\nwhere glass_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.758888Z", "completed_at": "2025-05-16T09:55:21.774651Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.777263Z", "completed_at": "2025-05-16T09:55:21.777273Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0231478214263916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_base_beverage_glass_lookup_glass_type.ad28035660", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    glass_type as unique_field,\n    count(*) as n_records\n\nfrom \"CamOnDagster\".\"public_base\".\"base_beverage_glass_lookup\"\nwhere glass_type is not null\ngroup by glass_type\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.784598Z", "completed_at": "2025-05-16T09:55:21.808339Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.810444Z", "completed_at": "2025-05-16T09:55:21.810461Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03155040740966797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_beverage_consumption_id_drink.561caf7667", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_drink\nfrom \"CamOnDagster\".\"public_base\".\"base_beverage_consumption\"\nwhere id_drink is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.794342Z", "completed_at": "2025-05-16T09:55:21.809157Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.812372Z", "completed_at": "2025-05-16T09:55:21.812389Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.029354572296142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_beverage_ingredient_hierarchy", "compiled": true, "compiled_code": "SELECT bil.ingredient, bil.beverage_id, bil.beverage_name\n\t,bil2.ingredient as ingredient2\n\t,bil3.ingredient as ingredient3\n\t,bil4.ingredient as ingredient4\n\t,bil5.ingredient as ingredient5\n\t,bil6.ingredient as ingredient6\n\t,bil7.ingredient as ingredient7\n\t-- FROM public_base.base_beverage_ingredients_lookup as bil\n    from \"CamOnDagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil\n\t-- Second\n\t-- left join public_base.base_beverage_ingredients_lookup as bil2 \n    left join \"CamOnDagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil2\n\ton bil.beverage_id = bil2.beverage_id and bil.ingredient != bil2.ingredient\n\t-- Third\n\t-- left join public_base.base_beverage_ingredients_lookup as bil3\n    left join \"CamOnDagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil3\n\ton bil.beverage_id = bil3.beverage_id and bil3.ingredient not in (bil2.ingredient, bil.ingredient)\n\t-- Fourth\n\t-- left join public_base.base_beverage_ingredients_lookup as bil4\n    left join \"CamOnDagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil4\n\ton bil.beverage_id = bil4.beverage_id and bil4.ingredient not in (bil3.ingredient, bil2.ingredient, bil.ingredient)\n\t-- Fifth\n\t-- left join public_base.base_beverage_ingredients_lookup as bil5\n    left join \"CamOnDagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil5\n\ton bil.beverage_id = bil5.beverage_id and bil5.ingredient not in (bil4.ingredient ,bil3.ingredient, bil2.ingredient, bil.ingredient)\n\t-- sixth\n\t-- left join public_base.base_beverage_ingredients_lookup as bil6\n    left join \"CamOnDagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil6\n\ton bil.beverage_id = bil6.beverage_id and bil6.ingredient not in (bil5.ingredient, bil4.ingredient ,bil3.ingredient, bil2.ingredient, bil.ingredient)\n\t-- seventh\n\t-- left join public_base.base_beverage_ingredients_lookup as bil7\n    left join \"CamOnDagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil7\n\ton bil.beverage_id = bil7.beverage_id and bil7.ingredient not in (bil6.ingredient, bil5.ingredient, bil4.ingredient ,bil3.ingredient, bil2.ingredient, bil.ingredient)\n-- \twhere bil.beverage_id = '17836'\n\torder by ingredient desc, beverage_name desc, ingredient2 desc", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_beverage_ingredient_hierarchy\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.842097Z", "completed_at": "2025-05-16T09:55:21.858013Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.859476Z", "completed_at": "2025-05-16T09:55:21.859492Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.039626121520996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.staging_beverage_lookup", "compiled": true, "compiled_code": "select beverage_name, \n\t-- used in dim_beverage to connect to consumption\n    beverage_id, \n\tbeverage_type,\n\t-- used in dim_beverage and dim_beverage_type as the connection\n\tmd5(cast(coalesce(cast(beverage_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as beverage_type_sk,\n\t-- used in dim_alcoholic_type and dim_beverage_type as connection\n\tmd5(cast(coalesce(cast(beverage_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(alcoholic_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as beverage_category_sk,\n\talcoholic_type,\n\t-- in dim_alcoholic_type encase any future fact tables need to connect directly \n\tmd5(cast(coalesce(cast(alcoholic_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as alcoholic_type_sk\n    from \"CamOnDagster\".\"public_base\".\"base_beverages\"", "relation_name": "\"CamOnDagster\".\"public_staging\".\"staging_beverage_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.825328Z", "completed_at": "2025-05-16T09:55:21.860525Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.863249Z", "completed_at": "2025-05-16T09:55:21.863259Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.045235395431518555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.dbt_utils_unique_combination_of_columns_base_beverage_ingredients_lookup_ingredient__beverage_id.b326d9a641", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ingredient, beverage_id\n    from \"CamOnDagster\".\"public_base\".\"base_beverage_ingredients_lookup\"\n    group by ingredient, beverage_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.870432Z", "completed_at": "2025-05-16T09:55:21.906593Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.909145Z", "completed_at": "2025-05-16T09:55:21.909160Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04446601867675781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.accepted_values_base_beverages_alcoholic_type__True__Non_alcoholic__Optional_alcohol__Alcoholic.34c9662782", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        alcoholic_type as value_field,\n        count(*) as n_records\n\n    from \"CamOnDagster\".\"public_base\".\"base_beverages\"\n    group by alcoholic_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Non alcoholic','Optional alcohol','Alcoholic'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.890862Z", "completed_at": "2025-05-16T09:55:21.907891Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.911302Z", "completed_at": "2025-05-16T09:55:21.911315Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.042520761489868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_beverages_beverage_id.b8f3d5637e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect beverage_id\nfrom \"CamOnDagster\".\"public_base\".\"base_beverages\"\nwhere beverage_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.924071Z", "completed_at": "2025-05-16T09:55:21.957552Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.960111Z", "completed_at": "2025-05-16T09:55:21.960126Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.043349266052246094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_beverages_beverage_name.4ae5d66d1b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect beverage_name\nfrom \"CamOnDagster\".\"public_base\".\"base_beverages\"\nwhere beverage_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.932127Z", "completed_at": "2025-05-16T09:55:21.958629Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:21.962767Z", "completed_at": "2025-05-16T09:55:21.962802Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04423952102661133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.relationships_base_beverage_consumption_id_drink__beverage_id__ref_base_beverages_.e5e651a6ba", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select id_drink as from_field\n    from \"CamOnDagster\".\"public_base\".\"base_beverage_consumption\"\n    where id_drink is not null\n),\n\nparent as (\n    select beverage_id as to_field\n    from \"CamOnDagster\".\"public_base\".\"base_beverages\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.976918Z", "completed_at": "2025-05-16T09:55:22.001777Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.003531Z", "completed_at": "2025-05-16T09:55:22.003562Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03443193435668945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_base_beverages_beverage_id.fca0ee3980", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    beverage_id as unique_field,\n    count(*) as n_records\n\nfrom \"CamOnDagster\".\"public_base\".\"base_beverages\"\nwhere beverage_id is not null\ngroup by beverage_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:21.984068Z", "completed_at": "2025-05-16T09:55:22.004881Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.007911Z", "completed_at": "2025-05-16T09:55:22.007934Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.036776065826416016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_base_beverages_beverage_name.a2d4fd1356", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    beverage_name as unique_field,\n    count(*) as n_records\n\nfrom \"CamOnDagster\".\"public_base\".\"base_beverages\"\nwhere beverage_name is not null\ngroup by beverage_name\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.017052Z", "completed_at": "2025-05-16T09:55:22.043054Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.044642Z", "completed_at": "2025-05-16T09:55:22.044656Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03462052345275879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.staging_geo", "compiled": true, "compiled_code": "select city_id, city, latitude, longitude, country_code, country, region, \nmd5(cast(coalesce(cast(city as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(country as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as City_SK,\nmd5(cast(coalesce(cast(country as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as Country_SK\nfrom \"CamOnDagster\".\"public_base\".\"base_geo\"", "relation_name": "\"CamOnDagster\".\"public_staging\".\"staging_geo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.028595Z", "completed_at": "2025-05-16T09:55:22.047634Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.050355Z", "completed_at": "2025-05-16T09:55:22.050365Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.035050153732299805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.accepted_values_base_geo_country_code__True__AU__NZ__CA__GB.a3d3afa24f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        country_code as value_field,\n        count(*) as n_records\n\n    from \"CamOnDagster\".\"public_base\".\"base_geo\"\n    group by country_code\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'AU','NZ','CA','GB'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.055688Z", "completed_at": "2025-05-16T09:55:22.103162Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.105126Z", "completed_at": "2025-05-16T09:55:22.105141Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05642580986022949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.dbt_expectations_expect_column_values_to_be_between_base_geo_latitude__90___90__False.c3084ce8f0", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and latitude >= -90 and latitude <= 90\n)\n as expression\n\n\n    from \"CamOnDagster\".\"public_base\".\"base_geo\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.086936Z", "completed_at": "2025-05-16T09:55:22.106695Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.110470Z", "completed_at": "2025-05-16T09:55:22.110482Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03264975547790527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.dbt_expectations_expect_column_values_to_be_between_base_geo_longitude__180___180__False.5d5a8f0a6a", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and longitude >= -180 and longitude <= 180\n)\n as expression\n\n\n    from \"CamOnDagster\".\"public_base\".\"base_geo\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.118208Z", "completed_at": "2025-05-16T09:55:22.142088Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.144385Z", "completed_at": "2025-05-16T09:55:22.144398Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03223109245300293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_geo_city_id.94562eb347", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city_id\nfrom \"CamOnDagster\".\"public_base\".\"base_geo\"\nwhere city_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.128705Z", "completed_at": "2025-05-16T09:55:22.143227Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.146126Z", "completed_at": "2025-05-16T09:55:22.146136Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.029584407806396484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_base_geo_city_id.a4c893fe58", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    city_id as unique_field,\n    count(*) as n_records\n\nfrom \"CamOnDagster\".\"public_base\".\"base_geo\"\nwhere city_id is not null\ngroup by city_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.158376Z", "completed_at": "2025-05-16T09:55:22.181130Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.182540Z", "completed_at": "2025-05-16T09:55:22.182557Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.031125783920288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_gsheets_finance_id.0d75c08608", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"CamOnDagster\".\"public_base\".\"base_gsheets_finance\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.167869Z", "completed_at": "2025-05-16T09:55:22.183585Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.185755Z", "completed_at": "2025-05-16T09:55:22.185764Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.032726287841796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_base_gsheets_finance_id.81717edef5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"CamOnDagster\".\"public_base\".\"base_gsheets_finance\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.192906Z", "completed_at": "2025-05-16T09:55:22.217125Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.218587Z", "completed_at": "2025-05-16T09:55:22.218602Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0314638614654541, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.staging_meal_category_lookup", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: staging_meal_category_lookup\n-- Description: Staging Table, lookup for category and country per meal, used for Dim\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT \n\tmeal_name, \n\tmeal_id, category_name,  \n\t-- Used in Dim_Meal_Category and Dim_Meal_Country\n\tmeal_country_category_sk,\n\tcountry_name,\n\t-- In Dim_Meal_Country encase any future fact tables need to connect directly \n\tmd5(cast(coalesce(cast(country_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as meal_country_sk\n    From \"CamOnDagster\".\"public_base\".\"base_meal_category_country\"", "relation_name": "\"CamOnDagster\".\"public_staging\".\"staging_meal_category_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.203491Z", "completed_at": "2025-05-16T09:55:22.220049Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.222764Z", "completed_at": "2025-05-16T09:55:22.222775Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03157997131347656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_meal_category_country_meal_id.f1fc6a2e02", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect meal_id\nfrom \"CamOnDagster\".\"public_base\".\"base_meal_category_country\"\nwhere meal_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.230817Z", "completed_at": "2025-05-16T09:55:22.257961Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.259862Z", "completed_at": "2025-05-16T09:55:22.259904Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.035408973693847656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_base_meal_category_country_meal_id.96de22ba03", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    meal_id as unique_field,\n    count(*) as n_records\n\nfrom \"CamOnDagster\".\"public_base\".\"base_meal_category_country\"\nwhere meal_id is not null\ngroup by meal_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.241650Z", "completed_at": "2025-05-16T09:55:22.261061Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.263998Z", "completed_at": "2025-05-16T09:55:22.264009Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03475308418273926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_meal_consumption_meal_id.5801469d88", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect meal_id\nfrom \"CamOnDagster\".\"public_base\".\"base_meal_consumption\"\nwhere meal_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.273207Z", "completed_at": "2025-05-16T09:55:22.301598Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.303590Z", "completed_at": "2025-05-16T09:55:22.303619Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.037869930267333984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.relationships_base_meal_consumption_meal_id__meal_id__ref_base_meal_category_country_.ebae62c8a2", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select meal_id as from_field\n    from \"CamOnDagster\".\"public_base\".\"base_meal_consumption\"\n    where meal_id is not null\n),\n\nparent as (\n    select meal_id as to_field\n    from \"CamOnDagster\".\"public_base\".\"base_meal_category_country\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.286539Z", "completed_at": "2025-05-16T09:55:22.304874Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.307952Z", "completed_at": "2025-05-16T09:55:22.307969Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0366671085357666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.dbt_utils_unique_combination_of_columns_base_meal_ingredient_table_ingredient_name__meal_id.319098ed2d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ingredient_name, meal_id\n    from \"CamOnDagster\".\"public_base\".\"base_meal_ingredient_table\"\n    group by ingredient_name, meal_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.316649Z", "completed_at": "2025-05-16T09:55:22.339153Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.340692Z", "completed_at": "2025-05-16T09:55:22.340714Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03075695037841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.staging_meal_ingredients_lookup", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: staging_meal_ingredients_lookup\n-- Description: Staging Table, lookup for Ingredients for each meal, used for Dim\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT mit.meal_name, mit.meal_id, mit.ingredient_name, mi.ingredient_id\n\tFROM \"CamOnDagster\".\"public_base\".\"base_meal_ingredient_table\" as mit \n\tleft join \"CamOnDagster\".\"public_base\".\"base_meal_ingredients\" as mi \n\ton mit.ingredient_name = mi.ingredient_name", "relation_name": "\"CamOnDagster\".\"public_staging\".\"staging_meal_ingredients_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.326280Z", "completed_at": "2025-05-16T09:55:22.342217Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.344604Z", "completed_at": "2025-05-16T09:55:22.344615Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.029633283615112305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_meal_ingredients_ingredient_id.0a9dcc549e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingredient_id\nfrom \"CamOnDagster\".\"public_base\".\"base_meal_ingredients\"\nwhere ingredient_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.351303Z", "completed_at": "2025-05-16T09:55:22.378217Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.379742Z", "completed_at": "2025-05-16T09:55:22.379785Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03386545181274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_base_meal_ingredients_ingredient_id.a78af5b0c2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ingredient_id as unique_field,\n    count(*) as n_records\n\nfrom \"CamOnDagster\".\"public_base\".\"base_meal_ingredients\"\nwhere ingredient_id is not null\ngroup by ingredient_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.362770Z", "completed_at": "2025-05-16T09:55:22.380900Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.383671Z", "completed_at": "2025-05-16T09:55:22.383682Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.034168243408203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_openlibrary_key.4f2c5727d5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"CamOnDagster\".\"public_base\".\"base_openlibrary\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.391790Z", "completed_at": "2025-05-16T09:55:22.414651Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.416514Z", "completed_at": "2025-05-16T09:55:22.416527Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.031080245971679688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_base_openlibrary_key.c2996aab1f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"CamOnDagster\".\"public_base\".\"base_openlibrary\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.401898Z", "completed_at": "2025-05-16T09:55:22.415520Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.418039Z", "completed_at": "2025-05-16T09:55:22.418049Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02819514274597168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_beverage_glass_type", "compiled": true, "compiled_code": "with base as (\nSELECT glass_type, glass_type_sk, dbt_valid_to,\nrow_number() over(partition by glass_type_sk order by dbt_valid_to desc) as rw_num\n    from \"CamOnDagster\".\"public_snapshots\".\"glass_type_snapshot\"\n\t)\n\t\n\tSelect glass_type, glass_type_sk\n\tfrom base\n\twhere rw_num = 1", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_beverage_glass_type\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.427915Z", "completed_at": "2025-05-16T09:55:22.452592Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.454274Z", "completed_at": "2025-05-16T09:55:22.454293Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.032572269439697266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_dim_date_date_col.0abb09b4ea", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_col\nfrom \"CamOnDagster\".\"public_common\".\"dim_date\"\nwhere date_col is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.434988Z", "completed_at": "2025-05-16T09:55:22.456136Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.459904Z", "completed_at": "2025-05-16T09:55:22.459915Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03630638122558594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_dim_date_date_col.217a54f7bd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    date_col as unique_field,\n    count(*) as n_records\n\nfrom \"CamOnDagster\".\"public_common\".\"dim_date\"\nwhere date_col is not null\ngroup by date_col\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.468519Z", "completed_at": "2025-05-16T09:55:22.491207Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.492865Z", "completed_at": "2025-05-16T09:55:22.492908Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.031165361404418945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_alcoholic_type", "compiled": true, "compiled_code": "SELECT alcoholic_type, \nalcoholic_type_sk\n\tFrom \"CamOnDagster\".\"public_staging\".\"staging_beverage_lookup\"\ngroup by alcoholic_type, alcoholic_type_sk", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_alcoholic_type\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.478263Z", "completed_at": "2025-05-16T09:55:22.494149Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.496857Z", "completed_at": "2025-05-16T09:55:22.496871Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03002333641052246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_beverage_type", "compiled": true, "compiled_code": "select beverage_type, alcoholic_type, beverage_category_sk, Alcoholic_Type_SK\n\tFrom \"CamOnDagster\".\"public_staging\".\"staging_beverage_lookup\"\n\tgroup by beverage_type, alcoholic_type, beverage_category_sk, Alcoholic_Type_SK", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_beverage_type\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.505674Z", "completed_at": "2025-05-16T09:55:22.527746Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.529303Z", "completed_at": "2025-05-16T09:55:22.529322Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030817508697509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.staging_beverage_consumption", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Staging_Beverage_Consumption\n-- Description: Fact Table data, consumption events generated from API \n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nselect id_drink as beverage_id, str_drink as beverage_name, \nbcl.beverage_category_sk as beverage_category_sk,\nstr_glass as glass_type,\nbcl.beverage_type_sk as beverage_type_sk,\nbcl.beverage_type as beverage_type,\nbcl.alcoholic_type_sk as alcoholic_type_sk,\nbcl.alcoholic_type as alcoholic_type,\nstr_category, \nstr_alcoholic, \nbgl.glass_type_sk,\nstr_instructions as beverage_instructions, str_drink_thumb as beverage_url, date_melbourne,\nstr_ingredient1, str_ingredient2, \nstr_ingredient3, str_ingredient4, str_ingredient5, \nstr_ingredient6, str_ingredient7, str_ingredient8\n\t-- from public_base.base_beverage_consumption as bc\n    from \"CamOnDagster\".\"public_base\".\"base_beverage_consumption\" as bc\n\t-- left join public_base.base_beverage_glass_lookup as bgl\n    left join \"CamOnDagster\".\"public_base\".\"base_beverage_glass_lookup\"  as bgl\n\ton bc.str_glass = bgl.glass_type\n\tleft join \"CamOnDagster\".\"public_staging\".\"staging_beverage_lookup\"  as bcl\n\ton bc.id_drink = bcl.beverage_id", "relation_name": "\"CamOnDagster\".\"public_staging\".\"staging_beverage_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.515492Z", "completed_at": "2025-05-16T09:55:22.530428Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.532807Z", "completed_at": "2025-05-16T09:55:22.532821Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0288848876953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_city", "compiled": true, "compiled_code": "select city, latitude, longitude, region, City_SK,\nCountry_SK\nfrom \"CamOnDagster\".\"public_staging\".\"staging_geo\"\ngroup by city, latitude, longitude, region, City_SK, Country_SK", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_city\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.542739Z", "completed_at": "2025-05-16T09:55:22.565597Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.568551Z", "completed_at": "2025-05-16T09:55:22.568580Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03406691551208496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_country", "compiled": true, "compiled_code": "select country_code, country, Country_SK\nfrom \"CamOnDagster\".\"public_staging\".\"staging_geo\"\ngroup by country_code, country, Country_SK", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.552718Z", "completed_at": "2025-05-16T09:55:22.566599Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.571493Z", "completed_at": "2025-05-16T09:55:22.571529Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03124213218688965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_meal_category", "compiled": true, "compiled_code": "SELECT category_name, country_name, meal_country_category_sk\n\tFrom \"CamOnDagster\".\"public_staging\".\"staging_meal_category_lookup\"\ngroup by category_name, country_name, meal_country_category_sk", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_meal_category\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.587694Z", "completed_at": "2025-05-16T09:55:22.613706Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.616190Z", "completed_at": "2025-05-16T09:55:22.616204Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03777480125427246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_meal_country", "compiled": true, "compiled_code": "SELECT country_name, meal_country_sk\n\tFrom \"CamOnDagster\".\"public_staging\".\"staging_meal_category_lookup\"\ngroup by country_name, meal_country_sk", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_meal_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.598354Z", "completed_at": "2025-05-16T09:55:22.614842Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.618234Z", "completed_at": "2025-05-16T09:55:22.618248Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03742384910583496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.staging_meal_consumption", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Staging_Meal_Consumption\n-- Description: Fact Table data, consumption events generated from API \n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT bc.meal_id as meal_id, bc.meal_name as meal_name,\nbc.category_name as category_name, bc.country_name as country_name,\n-- Dim SK\nbcl.meal_country_category_sk as meal_country_category_sk,\n\nbc.instructions as instructions, bc.meal_image_url as meal_image_url, bc.meal_youtube_url as meal_youtube_url, \nstr_ingredient1, str_ingredient2, str_ingredient3, str_ingredient4, str_ingredient5, str_ingredient6, \nstr_ingredient7, str_ingredient8, str_ingredient9, str_ingredient10, str_ingredient11, str_ingredient12, \nstr_ingredient13, str_ingredient14, str_ingredient15, str_ingredient16, str_ingredient17, str_ingredient18, \nstr_ingredient19, str_ingredient20, bc.meal_url as meal_url\n\t-- FROM public_base.base_beverage_consumption as bc\n    FROM \"CamOnDagster\".\"public_base\".\"base_meal_consumption\" as bc\n\tleft join \"CamOnDagster\".\"public_staging\".\"staging_meal_category_lookup\"  as bcl\n\ton bc.meal_id = bcl.meal_id", "relation_name": "\"CamOnDagster\".\"public_staging\".\"staging_meal_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.631925Z", "completed_at": "2025-05-16T09:55:22.653516Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.655614Z", "completed_at": "2025-05-16T09:55:22.655637Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03171706199645996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_meal_ingredient_hierarchy", "compiled": true, "compiled_code": "SELECT sil.meal_id, sil.ingredient_name as ingredient1\n,sil2.ingredient_name as ingredient2\n,sil3.ingredient_name as ingredient3\n,sil4.ingredient_name as ingredient4\nFROM \"CamOnDagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil\n-- Second\nleft join \"CamOnDagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil2\non sil.meal_id = sil2.meal_id and sil.ingredient_id != sil2.ingredient_id\n-- third\nleft join \"CamOnDagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil3\non sil.meal_id = sil3.meal_id and sil3.ingredient_id not in (sil2.ingredient_id, sil.ingredient_id)\n-- Fourth\nleft join \"CamOnDagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil4\non sil.meal_id = sil4.meal_id and sil4.ingredient_id not in (sil3.ingredient_id, sil2.ingredient_id, sil.ingredient_id)", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_meal_ingredient_hierarchy\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.639511Z", "completed_at": "2025-05-16T09:55:22.656943Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.660530Z", "completed_at": "2025-05-16T09:55:22.660545Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03448176383972168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_meal_ingredient_jointable", "compiled": true, "compiled_code": "SELECT distinct meal_id\n    from \"CamOnDagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" \n    where meal_id is not null", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_meal_ingredient_jointable\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.670255Z", "completed_at": "2025-05-16T09:55:22.692326Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.693939Z", "completed_at": "2025-05-16T09:55:22.693974Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03159928321838379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.fact_beverage_consumption", "compiled": true, "compiled_code": "SELECT beverage_id, beverage_name, glass_type_sk, Beverage_Category_SK,Beverage_Type_SK, \nAlcoholic_Type_SK, Beverage_Type, Alcoholic_type,\nbeverage_instructions, beverage_url, Glass_Type, date_melbourne,\nstr_ingredient1, str_ingredient2, \nstr_ingredient3, str_ingredient4, str_ingredient5, \nstr_ingredient6, str_ingredient7, str_ingredient8\n    From \"CamOnDagster\".\"public_staging\".\"staging_beverage_consumption\"", "relation_name": "\"CamOnDagster\".\"public_common\".\"fact_beverage_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.679529Z", "completed_at": "2025-05-16T09:55:22.695358Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.698068Z", "completed_at": "2025-05-16T09:55:22.698081Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.029896020889282227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_dim_city_city_sk.ab81b8c4f2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city_sk\nfrom \"CamOnDagster\".\"public_common\".\"dim_city\"\nwhere city_sk is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.707041Z", "completed_at": "2025-05-16T09:55:22.730303Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.732768Z", "completed_at": "2025-05-16T09:55:22.732792Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.033222198486328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_dim_city_city_sk.c481aa01d2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    city_sk as unique_field,\n    count(*) as n_records\n\nfrom \"CamOnDagster\".\"public_common\".\"dim_city\"\nwhere city_sk is not null\ngroup by city_sk\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.716701Z", "completed_at": "2025-05-16T09:55:22.734281Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.738244Z", "completed_at": "2025-05-16T09:55:22.738262Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.033102989196777344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_dim_country_country_sk.86f12ec03d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_sk\nfrom \"CamOnDagster\".\"public_common\".\"dim_country\"\nwhere country_sk is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.760612Z", "completed_at": "2025-05-16T09:55:22.773648Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.776117Z", "completed_at": "2025-05-16T09:55:22.776144Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.030248403549194336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.fact_meal_consumption", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Fact_Meal_Consumption\n-- Description: Fact Table, consumption events generated from API \n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT meal_id, meal_name,\ncategory_name, country_name,\nmeal_country_category_sk,\ninstructions, meal_image_url, meal_youtube_url, \nstr_ingredient1, str_ingredient2, str_ingredient3, str_ingredient4, str_ingredient5, str_ingredient6, \nstr_ingredient7, str_ingredient8, str_ingredient9, str_ingredient10, str_ingredient11, str_ingredient12, \nstr_ingredient13, str_ingredient14, str_ingredient15, str_ingredient16, str_ingredient17, str_ingredient18, \nstr_ingredient19, str_ingredient20, meal_url\nFROM \"CamOnDagster\".\"public_staging\".\"staging_meal_consumption\"", "relation_name": "\"CamOnDagster\".\"public_common\".\"fact_meal_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:55:22.747742Z", "completed_at": "2025-05-16T09:55:22.774750Z"}, {"name": "execute", "started_at": "2025-05-16T09:55:22.777947Z", "completed_at": "2025-05-16T09:55:22.777957Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.037451982498168945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_dim_country_country_sk.76e889bc85", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    country_sk as unique_field,\n    count(*) as n_records\n\nfrom \"CamOnDagster\".\"public_common\".\"dim_country\"\nwhere country_sk is not null\ngroup by country_sk\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 1.886817216873169, "args": {"select": [], "print": true, "introspect": true, "write_json": true, "favor_state": false, "static_parser": true, "defer": false, "cache_selected_only": false, "log_file_max_bytes": 10485760, "version_check": true, "warn_error_options": {"include": [], "exclude": []}, "static": false, "empty_catalog": false, "require_explicit_package_overrides_for_builtin_materializations": true, "log_level_file": "debug", "require_resource_names_without_spaces": false, "profiles_dir": "/workspaces/CamOnDagster/dbt", "send_anonymous_usage_stats": true, "show_resource_report": false, "source_freshness_run_project_hooks": false, "partial_parse": true, "log_format_file": "debug", "printer_width": 80, "use_colors_file": true, "partial_parse_file_diff": true, "invocation_command": "dbt docs generate", "state_modified_compare_vars": false, "populate_cache": true, "log_format": "default", "require_nested_cumulative_type_params": false, "use_colors": true, "log_path": "/workspaces/CamOnDagster/dbt/logs", "macro_debugging": false, "project_dir": "/workspaces/CamOnDagster/dbt", "require_batched_execution_for_custom_microbatch_strategy": false, "strict_mode": false, "skip_nodes_if_on_run_start_fails": false, "which": "generate", "log_level": "info", "compile": true, "indirect_selection": "eager", "require_yaml_configuration_for_mf_time_spines": false, "quiet": false, "state_modified_compare_more_unrendered_values": false, "exclude": [], "vars": {}}}