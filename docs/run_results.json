{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-05-16T13:26:54.593338Z", "invocation_id": "3142184d-6b93-4dea-8146-c392756c53b1", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:40.927539Z", "completed_at": "2025-05-16T13:26:40.959157Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:40.982747Z", "completed_at": "2025-05-16T13:26:41.278867Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.38034582138061523, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.base_beverage_glass_lookup", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_Beverage_glass_lookup\n-- Description: Beverage Glass Type Dim Base Table\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSelect str_glass as Glass_Type,\nmd5(cast(coalesce(cast(str_glass as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as Glass_Type_SK\nfrom \"camondagster\".\"beverage_data\".\"glasses\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_beverage_glass_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:40.910953Z", "completed_at": "2025-05-16T13:26:40.957973Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:40.960842Z", "completed_at": "2025-05-16T13:26:41.283224Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3865783214569092, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.base_beverage_consumption", "compiled": true, "compiled_code": "SELECT id_drink, str_drink, str_category, str_alcoholic, str_glass, str_instructions, \nstr_drink_thumb, (date_modified AT TIME ZONE 'Australia/Melbourne')::date AS date_melbourne,\nstr_ingredient1, str_ingredient2, \nstr_ingredient3, str_ingredient4, str_ingredient5, str_ingredient6, \nstr_ingredient7, str_ingredient8\n\t-- FROM cocktail_data.consumption\n    from \"camondagster\".\"beverage_data\".\"consumption\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_beverage_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:41.319629Z", "completed_at": "2025-05-16T13:26:41.347429Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:41.349265Z", "completed_at": "2025-05-16T13:26:41.563151Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2581064701080322, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.base_beverage_ingredients_lookup", "compiled": true, "compiled_code": "Select str_ingredient1 as Ingredient,\nit.id_drink as beverage_id,\nit.str_drink as Beverage_Name\nfrom \"camondagster\".\"beverage_data\".\"ingredients\" as i \nleft join \"camondagster\".\"beverage_data\".\"ingredients_table\"  as it\n\ton i.str_ingredient1 = it.source_ingredient\nwhere it.id_drink is not null", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_beverage_ingredients_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:41.328535Z", "completed_at": "2025-05-16T13:26:41.354828Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:41.361784Z", "completed_at": "2025-05-16T13:26:41.567303Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.25782084465026855, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.base_beverages", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_Beverages\n-- Description: Base Table for multiple Dims - Bev Type, Alcoholic Type and Beverage Name\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nselect bt.str_drink as beverage_name, \n    bt.id_drink as beverage_id, \n\tbt.source_beverage_type as beverage_type,\n\tmd5(cast(coalesce(cast(source_beverage_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_alcohol_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as beverage_category_sk,\n\tact.source_alcohol_type as alcoholic_type\n\tfrom \"camondagster\".\"beverage_data\".\"beverages_table\" as bt\n    left join \"camondagster\".\"beverage_data\".\"alcoholic_table\" as act \n\ton bt.id_drink = act.id_drink", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_beverages\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:41.601385Z", "completed_at": "2025-05-16T13:26:41.621102Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:41.643732Z", "completed_at": "2025-05-16T13:26:41.832213Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.25086140632629395, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.base_gsheets_finance", "compiled": true, "compiled_code": "SELECT \n    Id, \n    stock, \n    CAST(price AS DECIMAL) AS price,  -- DuckDB doesn't have a money type\n    date_time AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS date_time,\n    ROUND((MAX(price) OVER(PARTITION BY stock) - MIN(price) OVER(PARTITION BY stock)), 2) AS price_spread,\n    ROUND((LAST(price) OVER(PARTITION BY stock ORDER BY date_time) - FIRST(price) OVER(PARTITION BY stock)), 2) AS relative_price_movement,\n    ROUND((LAST(price) OVER(PARTITION BY stock) - FIRST(price) OVER(PARTITION BY stock)), 2) AS abs_price_movement,\n    COUNT(id) OVER(PARTITION BY stock) AS Num_Stock_Entries\nFROM \"camondagster\".\"google_sheets_data\".\"gsheets_finance\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_gsheets_finance\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:41.591044Z", "completed_at": "2025-05-16T13:26:41.613922Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:41.615610Z", "completed_at": "2025-05-16T13:26:41.842753Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2625713348388672, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.base_geo", "compiled": true, "compiled_code": "SELECT city_id, city, latitude, longitude, country_code, country, region, continent\nFrom \"camondagster\".\"geo_data\".\"geo_cities\" \nwhere country in ('New Zealand', 'United Kingdom', 'Australia', 'Canada')", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_geo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:41.868299Z", "completed_at": "2025-05-16T13:26:41.898127Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:41.900668Z", "completed_at": "2025-05-16T13:26:42.051277Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.19742178916931152, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.base_meal_category_country", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: base_meal_category_country\n-- Description: Base Table for multiple Dims - meal category, meal country\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT ct.str_meal as meal_name, ct.id_meal as meal_id, \n\tct.source_country as country_name,\n\tmd5(cast(coalesce(cast(source_country as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_category as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as meal_country_category_sk,\n\tcat.source_category as category_name\nFROM \"camondagster\".\"meals_data\".\"country_table\" as ct\n\tleft join \"camondagster\".\"meals_data\".\"category_table\" as cat \n\ton ct.id_meal = cat.id_meal", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_meal_category_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:41.884984Z", "completed_at": "2025-05-16T13:26:41.899399Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:41.910287Z", "completed_at": "2025-05-16T13:26:42.067068Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.19266247749328613, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.base_meal_consumption", "compiled": true, "compiled_code": "select id_meal as meal_id, str_meal as meal_name, str_category as category_name, str_area as country_name, \nstr_instructions as instructions, str_meal_thumb as meal_image_url, str_youtube as meal_youtube_url, \nNULLIF(str_ingredient1, '') as str_ingredient1, \nNULLIF(str_ingredient2, '') as str_ingredient2,\nNULLIF(str_ingredient3, '') as str_ingredient3,\nNULLIF(str_ingredient4, '') as str_ingredient4,\nNULLIF(str_ingredient5, '') as str_ingredient5,\nNULLIF(str_ingredient6, '') as str_ingredient6,\nNULLIF(str_ingredient7, '') as str_ingredient7, \nNULLIF(str_ingredient8, '') as str_ingredient8,\nNULLIF(str_ingredient9, '') as str_ingredient9,\nNULLIF(str_ingredient10, '') as str_ingredient10,\nNULLIF(str_ingredient11, '') as str_ingredient11,\nNULLIF(str_ingredient12, '') as str_ingredient12,\nNULLIF(str_ingredient13, '') as str_ingredient13,\nNULLIF(str_ingredient14, '') as str_ingredient14,\nNULLIF(str_ingredient15, '') as str_ingredient15,\nNULLIF(str_ingredient16, '') as str_ingredient16,\nNULLIF(str_ingredient17, '') as str_ingredient17,\nNULLIF(str_ingredient18, '') as str_ingredient18,\nNULLIF(str_ingredient19, '') as str_ingredient19,\nNULLIF(str_ingredient20, '') as str_ingredient20,\nstr_source as meal_url\n    from \"camondagster\".\"meals_data\".\"consumption\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_meal_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:42.100823Z", "completed_at": "2025-05-16T13:26:42.124050Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:42.126463Z", "completed_at": "2025-05-16T13:26:42.267305Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.17484807968139648, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.base_meal_ingredients", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_meal_ingredients\n-- Description: Base Table for meal ingredients\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT id_ingredient as ingredient_id, str_ingredient as ingredient_name\nFROM \"camondagster\".\"meals_data\".\"ingredients\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_meal_ingredients\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:42.082174Z", "completed_at": "2025-05-16T13:26:42.110718Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:42.113072Z", "completed_at": "2025-05-16T13:26:42.274285Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.20517182350158691, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.base_meal_ingredient_table", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_meal_ingredient_table\n-- Description: Base Table for list of meals for each ingredient\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT str_meal as meal_name, id_meal as meal_id, \nsource_ingredient as ingredient_name\nFROM \"camondagster\".\"meals_data\".\"ingredient_table\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_meal_ingredient_table\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:42.320770Z", "completed_at": "2025-05-16T13:26:42.339622Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:42.343500Z", "completed_at": "2025-05-16T13:26:42.481932Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.18264436721801758, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.base_rm_character_episode", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_rm_character_episode\n-- Description: Base join table\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT\n  _dlt_root_id AS character_dlt_id,\n  CAST(regexp_replace(value, '.*/(\\d+)$', '\\1') AS INTEGER) AS episode_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"character__episode\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_rm_character_episode\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:42.306191Z", "completed_at": "2025-05-16T13:26:42.332505Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:42.334171Z", "completed_at": "2025-05-16T13:26:42.522747Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.23343586921691895, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.base_openlibrary", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_Beverage_openlibrary\n-- Description: Unioning Tables with Books seperated by Search and Filter term\n-- from the OpenLibrary API, the point of this is to test using both DLT State\n-- & DuckDb connection to check for New API data (via DLT State) and deleted or\n-- truncation data loss with DuckDB sql comparison with DLT State.\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-15 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"sql_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"python_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"data_warehousing_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"data_engineering_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"apache_airflow_books\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_openlibrary\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:42.513468Z", "completed_at": "2025-05-16T13:26:42.539522Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:42.543472Z", "completed_at": "2025-05-16T13:26:42.687287Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.18328619003295898, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.base_rm_characters", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_rm_characters\n-- Description: Base Table for ricky and morty characters from API\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nSELECT id as character_id, name as character_name, status as character_status, \nspecies as character_species, gender as character_gender, \norigin__name as character_origin, \nlocation__name as character_first_location, location__url as character_first_location_url, \nimage as character_image, url as character_url, \ncreated AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS character_created\n, \"_dlt_id\" as character_dlt_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"character\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_rm_characters\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:42.559186Z", "completed_at": "2025-05-16T13:26:42.576208Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:42.578791Z", "completed_at": "2025-05-16T13:26:42.732856Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.1944596767425537, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.base_rm_episode_character", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_rm_episode_character\n-- Description: Base join table\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT\n  _dlt_root_id AS episode_dlt_id,\n  CAST(regexp_replace(value, '.*/(\\d+)$', '\\1') AS INTEGER) AS character_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"episode__characters\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_rm_episode_character\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:42.718281Z", "completed_at": "2025-05-16T13:26:42.743016Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:42.747003Z", "completed_at": "2025-05-16T13:26:42.883186Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1761760711669922, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.base_rm_episodes", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: base_rm_episode\n-- Description: Base Table for ricky and morty episodes from API\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nSELECT id as episode_id, name as episode_name\n,STRPTIME(air_date, '%B %d, %Y') AS episode_air_date\n, episode, url as episode_url\n,created AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS episode_created \n,\"_dlt_id\" as episode_dlt_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"episode\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_rm_episodes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:42.769964Z", "completed_at": "2025-05-16T13:26:42.792174Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:42.794612Z", "completed_at": "2025-05-16T13:26:42.934474Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.17148256301879883, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.base_rm_location_residents", "compiled": true, "compiled_code": "SELECT\n  _dlt_root_id AS location_dlt_id,\n  CAST(regexp_replace(value, '.*/(\\d+)$', '\\1') AS INTEGER) AS character_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"location__residents\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_rm_location_residents\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:42.915944Z", "completed_at": "2025-05-16T13:26:42.939164Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:42.940682Z", "completed_at": "2025-05-16T13:26:43.115131Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.21653962135314941, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.base_rm_locations", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: base_rm_locations\n-- Description: Base Table for ricky and morty locations from API\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT id as location_id, name as location_name, type as location_type, \ndimension as location_dimension, url as location_url\n,created AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS location_created\n,\"_dlt_id\" as location_dlt_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"location\"", "relation_name": "\"CamOnDagster\".\"public_base\".\"base_rm_locations\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:42.972707Z", "completed_at": "2025-05-16T13:26:42.998027Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:42.999603Z", "completed_at": "2025-05-16T13:26:43.130903Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.17212438583374023, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.dim_beverage_ingredient_jointable", "compiled": true, "compiled_code": "SELECT distinct id_drink as Beverage_ID\n    from \"camondagster\".\"beverage_data\".\"ingredients_table\" as it\n    where id_drink is not null", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_beverage_ingredient_jointable\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:43.165567Z", "completed_at": "2025-05-16T13:26:43.192938Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:43.195955Z", "completed_at": "2025-05-16T13:26:43.306737Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.1492919921875, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.dim_beverage_glass_type", "compiled": true, "compiled_code": "with base as (\nSELECT glass_type, glass_type_sk, dbt_valid_to,\nrow_number() over(partition by glass_type_sk order by dbt_valid_to desc) as rw_num\n    from \"CamOnDagster\".\"public_snapshots\".\"glass_type_snapshot\"\n\t)\n\t\n\tSelect glass_type, glass_type_sk\n\tfrom base\n\twhere rw_num = 1", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_beverage_glass_type\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:43.143231Z", "completed_at": "2025-05-16T13:26:43.171676Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:43.174282Z", "completed_at": "2025-05-16T13:26:46.124922Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.9941823482513428, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.dim_date", "compiled": true, "compiled_code": "WITH RECURSIVE date_series AS (\n    SELECT DATE '2000-01-01' AS date\n    UNION ALL\n    SELECT date + INTERVAL '1 day'\n    FROM date_series\n    WHERE date + INTERVAL '1 day' < DATE '2030-01-01'\n)\nSELECT\n    date AS date_col,\n    EXTRACT(YEAR FROM date) AS year,\n    EXTRACT(MONTH FROM date) AS month,\n    EXTRACT(DAY FROM date) AS day,\n    strftime('%B', date) AS month_name,  -- Replacing TO_CHAR with strftime\n    strftime('%A', date) AS weekday_name,  -- Replacing TO_CHAR with strftime\n    EXTRACT(DOW FROM date) AS day_of_week,\n    CASE WHEN EXTRACT(DOW FROM date) IN (0, 6) THEN TRUE ELSE FALSE END AS is_weekend,\n    EXTRACT(DOY FROM date) AS day_of_year,\n    EXTRACT(WEEK FROM date) AS week_of_year,\n    EXTRACT(QUARTER FROM date) AS quarter\nFROM date_series", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_date\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:46.137087Z", "completed_at": "2025-05-16T13:26:46.157910Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:46.159338Z", "completed_at": "2025-05-16T13:26:46.237132Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10523390769958496, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.staging_beverage_lookup", "compiled": true, "compiled_code": "select beverage_name, \n\t-- used in dim_beverage to connect to consumption\n    beverage_id, \n\tbeverage_type,\n\t-- used in dim_beverage and dim_beverage_type as the connection\n\tmd5(cast(coalesce(cast(beverage_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as beverage_type_sk,\n\t-- used in dim_alcoholic_type and dim_beverage_type as connection\n\tmd5(cast(coalesce(cast(beverage_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(alcoholic_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as beverage_category_sk,\n\talcoholic_type,\n\t-- in dim_alcoholic_type encase any future fact tables need to connect directly \n\tmd5(cast(coalesce(cast(alcoholic_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as alcoholic_type_sk\n    from \"CamOnDagster\".\"public_base\".\"base_beverages\"", "relation_name": "\"CamOnDagster\".\"public_staging\".\"staging_beverage_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:46.251612Z", "completed_at": "2025-05-16T13:26:46.271894Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:46.273662Z", "completed_at": "2025-05-16T13:26:46.355237Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10971426963806152, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.staging_geo", "compiled": true, "compiled_code": "select city_id, city, latitude, longitude, country_code, country, region, \nmd5(cast(coalesce(cast(city as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(country as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as City_SK,\nmd5(cast(coalesce(cast(country as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as Country_SK\nfrom \"CamOnDagster\".\"public_base\".\"base_geo\"", "relation_name": "\"CamOnDagster\".\"public_staging\".\"staging_geo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:46.372455Z", "completed_at": "2025-05-16T13:26:46.391223Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:46.392653Z", "completed_at": "2025-05-16T13:26:46.475689Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10994815826416016, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.staging_meal_category_lookup", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: staging_meal_category_lookup\n-- Description: Staging Table, lookup for category and country per meal, used for Dim\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT \n\tmeal_name, \n\tmeal_id, category_name,  \n\t-- Used in Dim_Meal_Category and Dim_Meal_Country\n\tmeal_country_category_sk,\n\tcountry_name,\n\t-- In Dim_Meal_Country encase any future fact tables need to connect directly \n\tmd5(cast(coalesce(cast(country_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as meal_country_sk\n    From \"CamOnDagster\".\"public_base\".\"base_meal_category_country\"", "relation_name": "\"CamOnDagster\".\"public_staging\".\"staging_meal_category_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:47.770334Z", "completed_at": "2025-05-16T13:26:47.791608Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:47.793660Z", "completed_at": "2025-05-16T13:26:47.890077Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12716245651245117, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.staging_meal_ingredients_lookup", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: staging_meal_ingredients_lookup\n-- Description: Staging Table, lookup for Ingredients for each meal, used for Dim\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT mit.meal_name, mit.meal_id, mit.ingredient_name, mi.ingredient_id\n\tFROM \"CamOnDagster\".\"public_base\".\"base_meal_ingredient_table\" as mit \n\tleft join \"CamOnDagster\".\"public_base\".\"base_meal_ingredients\" as mi \n\ton mit.ingredient_name = mi.ingredient_name", "relation_name": "\"CamOnDagster\".\"public_staging\".\"staging_meal_ingredients_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:47.907812Z", "completed_at": "2025-05-16T13:26:47.929641Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:47.931578Z", "completed_at": "2025-05-16T13:26:48.092861Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.19238781929016113, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.dim_alcoholic_type", "compiled": true, "compiled_code": "SELECT alcoholic_type, \nalcoholic_type_sk\n\tFrom \"CamOnDagster\".\"public_staging\".\"staging_beverage_lookup\"\ngroup by alcoholic_type, alcoholic_type_sk", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_alcoholic_type\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:48.110362Z", "completed_at": "2025-05-16T13:26:48.130975Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:48.132436Z", "completed_at": "2025-05-16T13:26:48.217487Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11388206481933594, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.dim_beverage_type", "compiled": true, "compiled_code": "select beverage_type, alcoholic_type, beverage_category_sk, Alcoholic_Type_SK\n\tFrom \"CamOnDagster\".\"public_staging\".\"staging_beverage_lookup\"\n\tgroup by beverage_type, alcoholic_type, beverage_category_sk, Alcoholic_Type_SK", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_beverage_type\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:48.233095Z", "completed_at": "2025-05-16T13:26:48.254734Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:48.256524Z", "completed_at": "2025-05-16T13:26:48.360333Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13431382179260254, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.staging_beverage_consumption", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Staging_Beverage_Consumption\n-- Description: Fact Table data, consumption events generated from API \n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nselect id_drink as beverage_id, str_drink as beverage_name, \nbcl.beverage_category_sk as beverage_category_sk,\nstr_glass as glass_type,\nbcl.beverage_type_sk as beverage_type_sk,\nbcl.beverage_type as beverage_type,\nbcl.alcoholic_type_sk as alcoholic_type_sk,\nbcl.alcoholic_type as alcoholic_type,\nstr_category, \nstr_alcoholic, \nbgl.glass_type_sk,\nstr_instructions as beverage_instructions, str_drink_thumb as beverage_url, date_melbourne,\nstr_ingredient1, str_ingredient2, \nstr_ingredient3, str_ingredient4, str_ingredient5, \nstr_ingredient6, str_ingredient7, str_ingredient8\n\t-- from public_base.base_beverage_consumption as bc\n    from \"CamOnDagster\".\"public_base\".\"base_beverage_consumption\" as bc\n\t-- left join public_base.base_beverage_glass_lookup as bgl\n    left join \"CamOnDagster\".\"public_base\".\"base_beverage_glass_lookup\"  as bgl\n\ton bc.str_glass = bgl.glass_type\n\tleft join \"CamOnDagster\".\"public_staging\".\"staging_beverage_lookup\"  as bcl\n\ton bc.id_drink = bcl.beverage_id", "relation_name": "\"CamOnDagster\".\"public_staging\".\"staging_beverage_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:48.378821Z", "completed_at": "2025-05-16T13:26:48.398324Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:48.399967Z", "completed_at": "2025-05-16T13:26:48.490588Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11965036392211914, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.dim_city", "compiled": true, "compiled_code": "select city, latitude, longitude, region, City_SK,\nCountry_SK\nfrom \"CamOnDagster\".\"public_staging\".\"staging_geo\"\ngroup by city, latitude, longitude, region, City_SK, Country_SK", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_city\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:48.507058Z", "completed_at": "2025-05-16T13:26:48.524212Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:48.525643Z", "completed_at": "2025-05-16T13:26:48.614639Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11479449272155762, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.dim_country", "compiled": true, "compiled_code": "select country_code, country, Country_SK\nfrom \"CamOnDagster\".\"public_staging\".\"staging_geo\"\ngroup by country_code, country, Country_SK", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:48.631059Z", "completed_at": "2025-05-16T13:26:48.657565Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:48.659758Z", "completed_at": "2025-05-16T13:26:48.745699Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1224675178527832, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.dim_meal_category", "compiled": true, "compiled_code": "SELECT category_name, country_name, meal_country_category_sk\n\tFrom \"CamOnDagster\".\"public_staging\".\"staging_meal_category_lookup\"\ngroup by category_name, country_name, meal_country_category_sk", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_meal_category\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:48.762780Z", "completed_at": "2025-05-16T13:26:48.781165Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:48.782910Z", "completed_at": "2025-05-16T13:26:48.878024Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12452197074890137, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.dim_meal_country", "compiled": true, "compiled_code": "SELECT country_name, meal_country_sk\n\tFrom \"CamOnDagster\".\"public_staging\".\"staging_meal_category_lookup\"\ngroup by country_name, meal_country_sk", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_meal_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:43.326819Z", "completed_at": "2025-05-16T13:26:43.352088Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:43.353710Z", "completed_at": "2025-05-16T13:26:49.036127Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 5.718994855880737, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.dim_beverage_ingredient_hierarchy", "compiled": true, "compiled_code": "SELECT bil.ingredient, bil.beverage_id, bil.beverage_name\n\t,bil2.ingredient as ingredient2\n\t,bil3.ingredient as ingredient3\n\t,bil4.ingredient as ingredient4\n\t,bil5.ingredient as ingredient5\n\t,bil6.ingredient as ingredient6\n\t,bil7.ingredient as ingredient7\n\t-- FROM public_base.base_beverage_ingredients_lookup as bil\n    from \"CamOnDagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil\n\t-- Second\n\t-- left join public_base.base_beverage_ingredients_lookup as bil2 \n    left join \"CamOnDagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil2\n\ton bil.beverage_id = bil2.beverage_id and bil.ingredient != bil2.ingredient\n\t-- Third\n\t-- left join public_base.base_beverage_ingredients_lookup as bil3\n    left join \"CamOnDagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil3\n\ton bil.beverage_id = bil3.beverage_id and bil3.ingredient not in (bil2.ingredient, bil.ingredient)\n\t-- Fourth\n\t-- left join public_base.base_beverage_ingredients_lookup as bil4\n    left join \"CamOnDagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil4\n\ton bil.beverage_id = bil4.beverage_id and bil4.ingredient not in (bil3.ingredient, bil2.ingredient, bil.ingredient)\n\t-- Fifth\n\t-- left join public_base.base_beverage_ingredients_lookup as bil5\n    left join \"CamOnDagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil5\n\ton bil.beverage_id = bil5.beverage_id and bil5.ingredient not in (bil4.ingredient ,bil3.ingredient, bil2.ingredient, bil.ingredient)\n\t-- sixth\n\t-- left join public_base.base_beverage_ingredients_lookup as bil6\n    left join \"CamOnDagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil6\n\ton bil.beverage_id = bil6.beverage_id and bil6.ingredient not in (bil5.ingredient, bil4.ingredient ,bil3.ingredient, bil2.ingredient, bil.ingredient)\n\t-- seventh\n\t-- left join public_base.base_beverage_ingredients_lookup as bil7\n    left join \"CamOnDagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil7\n\ton bil.beverage_id = bil7.beverage_id and bil7.ingredient not in (bil6.ingredient, bil5.ingredient, bil4.ingredient ,bil3.ingredient, bil2.ingredient, bil.ingredient)\n-- \twhere bil.beverage_id = '17836'\n\torder by ingredient desc, beverage_name desc, ingredient2 desc", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_beverage_ingredient_hierarchy\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:48.896768Z", "completed_at": "2025-05-16T13:26:48.916670Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:48.918595Z", "completed_at": "2025-05-16T13:26:49.040717Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15081000328063965, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.staging_meal_consumption", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Staging_Meal_Consumption\n-- Description: Fact Table data, consumption events generated from API \n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT bc.meal_id as meal_id, bc.meal_name as meal_name,\nbc.category_name as category_name, bc.country_name as country_name,\n-- Dim SK\nbcl.meal_country_category_sk as meal_country_category_sk,\n\nbc.instructions as instructions, bc.meal_image_url as meal_image_url, bc.meal_youtube_url as meal_youtube_url, \nstr_ingredient1, str_ingredient2, str_ingredient3, str_ingredient4, str_ingredient5, str_ingredient6, \nstr_ingredient7, str_ingredient8, str_ingredient9, str_ingredient10, str_ingredient11, str_ingredient12, \nstr_ingredient13, str_ingredient14, str_ingredient15, str_ingredient16, str_ingredient17, str_ingredient18, \nstr_ingredient19, str_ingredient20, bc.meal_url as meal_url\n\t-- FROM public_base.base_beverage_consumption as bc\n    FROM \"CamOnDagster\".\"public_base\".\"base_meal_consumption\" as bc\n\tleft join \"CamOnDagster\".\"public_staging\".\"staging_meal_category_lookup\"  as bcl\n\ton bc.meal_id = bcl.meal_id", "relation_name": "\"CamOnDagster\".\"public_staging\".\"staging_meal_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:49.074965Z", "completed_at": "2025-05-16T13:26:49.094062Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:49.096425Z", "completed_at": "2025-05-16T13:26:49.189816Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1326732635498047, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.dim_meal_ingredient_jointable", "compiled": true, "compiled_code": "SELECT distinct meal_id\n    from \"CamOnDagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" \n    where meal_id is not null", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_meal_ingredient_jointable\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:49.206184Z", "completed_at": "2025-05-16T13:26:49.223500Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:49.225522Z", "completed_at": "2025-05-16T13:26:49.303580Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10414242744445801, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.fact_beverage_consumption", "compiled": true, "compiled_code": "SELECT beverage_id, beverage_name, glass_type_sk, Beverage_Category_SK,Beverage_Type_SK, \nAlcoholic_Type_SK, Beverage_Type, Alcoholic_type,\nbeverage_instructions, beverage_url, Glass_Type, date_melbourne,\nstr_ingredient1, str_ingredient2, \nstr_ingredient3, str_ingredient4, str_ingredient5, \nstr_ingredient6, str_ingredient7, str_ingredient8\n    From \"CamOnDagster\".\"public_staging\".\"staging_beverage_consumption\"", "relation_name": "\"CamOnDagster\".\"public_common\".\"fact_beverage_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:49.317957Z", "completed_at": "2025-05-16T13:26:49.333930Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:49.335986Z", "completed_at": "2025-05-16T13:26:49.436342Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12483811378479004, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.fact_meal_consumption", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Fact_Meal_Consumption\n-- Description: Fact Table, consumption events generated from API \n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT meal_id, meal_name,\ncategory_name, country_name,\nmeal_country_category_sk,\ninstructions, meal_image_url, meal_youtube_url, \nstr_ingredient1, str_ingredient2, str_ingredient3, str_ingredient4, str_ingredient5, str_ingredient6, \nstr_ingredient7, str_ingredient8, str_ingredient9, str_ingredient10, str_ingredient11, str_ingredient12, \nstr_ingredient13, str_ingredient14, str_ingredient15, str_ingredient16, str_ingredient17, str_ingredient18, \nstr_ingredient19, str_ingredient20, meal_url\nFROM \"CamOnDagster\".\"public_staging\".\"staging_meal_consumption\"", "relation_name": "\"CamOnDagster\".\"public_common\".\"fact_meal_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T13:26:49.065184Z", "completed_at": "2025-05-16T13:26:49.086843Z"}, {"name": "execute", "started_at": "2025-05-16T13:26:49.088645Z", "completed_at": "2025-05-16T13:26:54.552870Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 5.498498916625977, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.CamOnDagster.dim_meal_ingredient_hierarchy", "compiled": true, "compiled_code": "SELECT sil.meal_id, sil.ingredient_name as ingredient1\n,sil2.ingredient_name as ingredient2\n,sil3.ingredient_name as ingredient3\n,sil4.ingredient_name as ingredient4\nFROM \"CamOnDagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil\n-- Second\nleft join \"CamOnDagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil2\non sil.meal_id = sil2.meal_id and sil.ingredient_id != sil2.ingredient_id\n-- third\nleft join \"CamOnDagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil3\non sil.meal_id = sil3.meal_id and sil3.ingredient_id not in (sil2.ingredient_id, sil.ingredient_id)\n-- Fourth\nleft join \"CamOnDagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil4\non sil.meal_id = sil4.meal_id and sil4.ingredient_id not in (sil3.ingredient_id, sil2.ingredient_id, sil.ingredient_id)", "relation_name": "\"CamOnDagster\".\"public_common\".\"dim_meal_ingredient_hierarchy\"", "batch_results": null}], "elapsed_time": 14.280296564102173, "args": {"log_level": "info", "macro_debugging": false, "require_nested_cumulative_type_params": false, "show_resource_report": false, "project_dir": "/workspaces/CamOnDagster/dbt", "require_explicit_package_overrides_for_builtin_materializations": true, "cache_selected_only": false, "log_level_file": "debug", "select": [], "empty": false, "which": "run", "print": true, "log_format": "default", "quiet": false, "use_colors": true, "warn_error_options": {"include": [], "exclude": []}, "defer": false, "log_format_file": "debug", "invocation_command": "dbt run", "favor_state": false, "log_file_max_bytes": 10485760, "skip_nodes_if_on_run_start_fails": false, "static_parser": true, "printer_width": 80, "require_resource_names_without_spaces": false, "send_anonymous_usage_stats": true, "profiles_dir": "/workspaces/CamOnDagster/dbt", "vars": {}, "write_json": true, "strict_mode": false, "partial_parse": true, "log_path": "/workspaces/CamOnDagster/dbt/logs", "state_modified_compare_more_unrendered_values": false, "require_batched_execution_for_custom_microbatch_strategy": false, "indirect_selection": "eager", "introspect": true, "use_colors_file": true, "populate_cache": true, "require_yaml_configuration_for_mf_time_spines": false, "partial_parse_file_diff": true, "version_check": true, "exclude": [], "state_modified_compare_vars": false, "source_freshness_run_project_hooks": false}}